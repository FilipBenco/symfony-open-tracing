services:
    OpenTracing\Tracer: '@open_tracing.tracer'
    open_tracing.tracer: '@open_tracing.tracer.noop'
    open_tracing.tracer.noop:
        class: OpenTracing\NoopTracer

    jaeger.tracer:
        class: Jaeger\Tracer
        factory: ['@jaeger.config', 'initializeTracer']

    jaeger.config:
        class: Jaeger\Config
        lazy: true
        arguments:
            $logger: '@logger'
            $cache: '@cache.app'
        tags:
            - { name: monolog.logger, channel: tracing }

    open_tracing.name_getter:
        class: Adtechpotok\Bundle\SymfonyOpenTracing\Service\RootSpanNameBuilder
        arguments:
            - 'http-tracing'
            - 'cli-tracing'

    open_tracing.http_listener:
        class: Adtechpotok\Bundle\SymfonyOpenTracing\EventListener\HttpListener
        arguments:
          - '@open_tracing.tracer'
          - '@open_tracing.name_getter'
        tags:
            - { name: kernel.event_listener, event: kernel.request }
            - { name: kernel.event_listener, event: kernel.terminate }
            - { name: kernel.event_listener, event: kernel.exception }
            - { name: kernel.event_listener, event: kernel.response }

    open_tracing.cli_listener:
        class: Adtechpotok\Bundle\SymfonyOpenTracing\EventListener\CliListener
        arguments:
            - '@open_tracing.tracer'
            - '@open_tracing.name_getter'
        tags:
            - { name: kernel.event_listener, event: console.command }
            - { name: kernel.event_listener, event: console.terminate }
            - { name: kernel.event_listener, event: console.error }

    open_tracing.messenger:
        class: Adtechpotok\Bundle\SymfonyOpenTracing\EventListener\MessengerListener
        arguments:
            - '@open_tracing.tracer'
            - '@open_tracing.name_getter'
        tags:
            - { name: kernel.event_listener, event: Symfony\Component\Messenger\Event\WorkerMessageReceivedEvent, method: onWorkerMessageReceived }
            - { name: kernel.event_listener, event: Symfony\Component\Messenger\Event\WorkerMessageHandledEvent, method: onWorkerMessageHandled }
            - { name: kernel.event_listener, event: Symfony\Component\Messenger\Event\WorkerMessageFailedEvent, method: onWorkerMessageFailed }